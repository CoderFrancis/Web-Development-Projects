Here’s a high-level plan for your project:

Design the Database Schema: Figure out what information you want to store (e.g., student names, types, classes, teachers) and design the database schema accordingly.

Set Up the Back-End: Choose a Python web framework (Django or Flask) and set up the basic structure. Implement the routes/endpoints for handling data (e.g., creating a new student, listing classes).

Create the Front-End: Build the user interface with HTML, CSS, and JavaScript. Consider using a front-end framework/library like React or Vue.js for dynamic content.

Connect Front-End with Back-End: Make sure your front-end can communicate with your back-end. Fetch data from the back-end and show it in the front-end, handle form submissions, etc.

Testing: Test your application for any bugs or issues. Make sure all functionalities are working as expected.

Deployment: Once you are satisfied with your application, deploy it using a web server. Django and Flask both have documentation on how to deploy applications built with them.

Remember to keep the scope of the project manageable, especially if you are working on it alone. It’s better to have a polished, smaller-scale project than an unfinished, ambitious one. This project can be a great addition to your portfolio, and it sounds like it could be quite engaging and unique!

Alright, let's get started on that basic HTML and CSS framework. Here’s how we can lay it out:

A header for the university name and maybe a tagline like "Educating the Universe, One Species at a Time."
A navigation bar to go between pages like "Home," "About Us," "Courses," "Faculty," and "Contact."
A main content area that could include a welcome message, some news or announcements, and maybe even a few profiles for "Student of the Month" across species.
A footer with some basic contact info and social media links.
Here's some example code to give you a starting point:

Add a school history ( some of the images that were generated look older)